package org.allenai.extraction.processors.dependencies

import org.allenai.extraction.rdf.{ DependencyGraph, TurtleProcessor }
import org.allenai.extraction.rdf.VertexWrapper.VertexRdf
import com.tinkerpop.blueprints.Vertex
import com.tinkerpop.blueprints.impls.sail.SailGraph
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import org.allenai.extraction.processors.NlpstackParser
import java.io.Writer
import org.apache.commons.io.output.WriterOutputStream
import org.allenai.extraction.{ ErmineException, MultiTextProcessor }
import org.allenai.extraction.rdf.{ DependencyGraph, Token }
import org.allenai.extraction.rdf.DependencyGraph.GraphRdf
import org.allenai.nlpstack.lemmatize.MorphaStemmer
import org.allenai.nlpstack.parse.PolytreeParser
import org.allenai.nlpstack.postag.defaultPostagger
import org.allenai.nlpstack.tokenize.defaultTokenizer
import scala.language.postfixOps
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import scala.io.Source
import java.io.Writer
import java.io.PrintWriter


object PolyExtractorTest4 extends TurtleProcessor with App {
val txtsource = io.Source.fromFile("src/test/data/barrons-sentences.txt")

  val list = List("1", "2", "3")
  val newset = set ++ Set("3")
  println(set)
  println(newset)
	
  System.exit(0)

  def relTarget(graph: SailGraph, node: Vertex): Vertex = {
    // check for VBG vmod on NN node and use instead
    // avoids repeated pattern in many rules
    val uri = node.toUri
    val vmodQuery: String = s"""SELECT ?vmod WHERE {
      <$uri> dep:vmod ?vmod .
      ?vmod token:pos "VBG" . 
      <$uri> token:pos ?pos .
      FILTER STRSTARTS(?pos, "NN") }"""
    DependencyGraph.executeSparql(graph, vmodQuery).headOption match {
      case Some(map) => map("vmod")
      case None => node
    }
  }

  override def processGraph(graph: SailGraph): Unit = {

  }
}
package org.allenai.extraction.processors.dependencies

import org.allenai.extraction.rdf.{ DependencyGraph, TurtleProcessor }
import org.allenai.extraction.rdf.VertexWrapper.VertexRdf
import com.tinkerpop.blueprints.Vertex
import com.tinkerpop.blueprints.impls.sail.SailGraph
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import org.allenai.extraction.processors.NlpstackParser
import java.io.Writer
import org.apache.commons.io.output.WriterOutputStream
import org.allenai.extraction.{ ErmineException, MultiTextProcessor }
import org.allenai.extraction.rdf.{ DependencyGraph, Token }
import org.allenai.extraction.rdf.DependencyGraph.GraphRdf
import org.allenai.nlpstack.lemmatize.MorphaStemmer
import org.allenai.nlpstack.parse.PolytreeParser
import org.allenai.nlpstack.postag.defaultPostagger
import org.allenai.nlpstack.tokenize.defaultTokenizer
import scala.language.postfixOps
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import scala.io.Source
import java.io.Writer
import java.io.PrintWriter


object PolyExtractorTest4 extends TurtleProcessor with App {
val txtsource = io.Source.fromFile("src/test/data/barrons-sentences.txt")

  val list = List("1", "2", "3")
  val newset = list.toSet ++ Set("3")
  println(list)
  println(newset)
	
  System.exit(0)

  val query = "CONSTRUCT { ?_1 rel:cause ?_2 . } WHERE { ?_1 dep:rcmod ?_3 . ?_4 dep:pobj ?_2 . ?_3 dep:prep ?_4 .}"

  override def processGraph(graph: SailGraph): Unit = {
	val map = DependencyGraph.executeSparql(graph, query)
  }
}
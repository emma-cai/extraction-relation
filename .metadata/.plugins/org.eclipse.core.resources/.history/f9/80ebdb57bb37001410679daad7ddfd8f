package org.allenai.extraction.processors.dependencies

import org.allenai.extraction.rdf.{ DependencyGraph, TurtleProcessor }
import org.allenai.extraction.rdf.VertexWrapper.VertexRdf
import com.tinkerpop.blueprints.Vertex
import com.tinkerpop.blueprints.impls.sail.SailGraph
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import org.allenai.extraction.processors.NlpstackParser
import java.io.Writer
import org.apache.commons.io.output.WriterOutputStream
import org.allenai.extraction.{ ErmineException, MultiTextProcessor }
import org.allenai.extraction.rdf.{ DependencyGraph, Token }
import org.allenai.extraction.rdf.DependencyGraph.GraphRdf
import org.allenai.nlpstack.lemmatize.MorphaStemmer
import org.allenai.nlpstack.parse.PolytreeParser
import org.allenai.nlpstack.postag.defaultPostagger
import org.allenai.nlpstack.tokenize.defaultTokenizer
import scala.language.postfixOps
import com.tinkerpop.blueprints.impls.sail.impls.MemoryStoreSailGraph
import scala.io.Source
import java.io.Writer
import java.io.PrintWriter



object PolyExtractorTest4 extends TurtleProcessor with App {
  val queries = Seq(("id1", """CONSTRUCT { ?root rel:effect ?comp . } WHERE {
      ?root dep:vmod | dep:xcomp ?comp .
      FILTER NOT EXISTS { ?root dep:cop ?cop . }
      ?root token:lemma ?lemma .
      FILTER (!REGEX(?lemma, "^(be|cause)$$"))
      ?comp dep:aux ?aux .
      ?aux token:pos "TO" .
      ?comp token:lemma ?complemma .
      FILTER (!REGEX(?complemma, "^(help|aid|allow|assist|enable)$$"))
    }"""))
    
  val textpath = "ie-target.txt"
  val parserpath = "ie-target.parse"
  NlpstackParser.processText(scala.io.Source.fromFile(textpath),  new PrintWriter(parserpath))
  val graph = new MemoryStoreSailGraph()
  DependencyGraph.fromTurtle(graph, scala.io.Source.fromFile(parserpath))
  println(graph.toString())
  processGraph(graph)
  
  System.exit(0)
  
  override def processGraph(graph: SailGraph): Unit = {
    println(queries)
    for {
      (id, query) <- queries
      map <- DependencyGraph.executeSparql(graph, query)
    } {
//      println("using: " + query)
//      val subj = map("subject")
//      val subjstr = "<" + subj.getId().toString() + ">"
//      val obj = map("object")
//      val objstr = "<" + obj.getId().toString() + ">"
//      println("subj = " + subj)
//      println("subjstr = " + subjstr)
//      println("obj = " + obj)
//      println("objstr = " + objstr)
    }
	
  }
}
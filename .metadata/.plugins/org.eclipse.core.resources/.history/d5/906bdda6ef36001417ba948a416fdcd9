package org.allenai.relation.learning

import java.io.PrintWriter

object LexicalFrequency {
  val inputFile = "data/learning/train/training.txt"
  val outputFile = "data/learning/train/lexicalfrequency.txt"
  processText(inputFile, outputFile)
  System.exit(0)
  
  def processText(inputFile: String, outputFile: String) = {
    val source = scala.io.Source.fromFile(inputFile)
    var map: Map[String, Int] = collection.mutable.Map.empty[String, Int]
    for(line <- source.getLines.drop(1)) {
      val (sid, sentence, disrel, relphrase, arg1str, arg2str, annotationOpt) = splitToTuple(line, "\t")
      if(annotationOpt.equals("1")) {
    	println(line)
        val (root, tree) = Polyparser.processText(sentence)
	    val arg1list = Polyparser.findHeadW(tree.vertices.toList, arg1str, tree.edges.toList)
	    val arg2list = Polyparser.findHeadW(tree.vertices.toList, arg2str, tree.edges.toList)

//	    val arg1_arg2_paths1set_List = FeatureWrapper.getpathwithspecificlength(root, tree, arg1list, arg2list, 1)
	    val arg1_arg2_paths2set_List = FeatureWrapper.getpathwithspecificlength(root, tree, arg1list, arg2list, 2)
	    val arg1_arg2_paths3set_List = FeatureWrapper.getpathwithspecificlength(root, tree, arg1list, arg2list, 3)
	    val arg1_arg2_paths4set_List = FeatureWrapper.getpathwithspecificlength(root, tree, arg1list, arg2list, 4)
	    
//	    val generalDependenciesLength1 = Polyparser.generalizeDependencypaths(arg1_arg2_paths1set_List) // general-dependency-path = 1
        val generalDependenciesLength2 = Polyparser.generalizeDependencypaths(arg1_arg2_paths2set_List) // general-dependency-path = 2
        val generalDependenciesLength3 = Polyparser.generalizeDependencypaths(arg1_arg2_paths3set_List) // general-dependency-path = 3
        val generalDependenciesLength4 = Polyparser.generalizeDependencypaths(arg1_arg2_paths4set_List)
        
//	    map = updateMap(map, disrel, generalDependenciesLength1)
	    map = updateMap(map, disrel, generalDependenciesLength2)
	    map = updateMap(map, disrel, generalDependenciesLength3)
	    map = updateMap(map, disrel, generalDependenciesLength4)
	    
      }
      
      val writer = new PrintWriter(outputFile)
      
  }
}
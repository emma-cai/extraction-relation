QUESTION: Which force causes rocks to roll downhill? (A) gravity(B) friction(C) erosion(D) magnetism
% "gravity"	"causes"/CAUSE	("rocks" "roll" "" [ "downhill" ] )
english(rule1, "gravity causes rocks to roll downhill").
rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill"), cause(A1S1-gravity, E5S1-roll) -> isa(A1S1-gravity, "gravity").

% "friction"	"causes"/CAUSE	("rocks" "roll" "" [ "downhill" ] )
english(rule1, "friction causes rocks to roll downhill").
rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill"), cause(A1S1-friction, E5S1-roll) -> isa(A1S1-friction, "friction").

% "erosion"	"causes"/CAUSE	("rocks" "roll" "" [ "downhill" ] )
english(rule1, "erosion causes rocks to roll downhill").
rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill"), cause(A1S1-erosion, E5S1-roll) -> isa(A1S1-erosion, "erosion").

% "magnetism"	"causes"/CAUSE	("rocks" "roll" "" [ "downhill" ] )
english(rule1, "magnetism causes rocks to roll downhill").
rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill"), cause(A1S1-magnetism, E5S1-roll) -> isa(A1S1-magnetism, "magnetism").

QUESTION: Which activity is an example of a good health habit? (A) watching television(B) smoking cigarettes(C) eating candy(D) exercising every day
% "watching television"	"example[watching television] of"/EXAMPLE	"a good health habit"
english(rule1, "watching television is an example[watching television] of a good health habit").
rule1:: isa(A10S1-habit, "a good health habit"), example(A2S1-television, A10S1-habit) -> isa(A2S1-television, "watching television").

% "smoking cigarettes"	"example of"/EXAMPLE	"a good health habit"
english(rule1, "smoking cigarettes is an example of a good health habit").
rule1:: isa(A10S1-habit, "a good health habit"), example(A2S1-cigarette, A10S1-habit) -> isa(A2S1-cigarette, "smoking cigarettes").

% ("" "be" "" [ "an example of a good health habit" ] )
% ("" "exercise" "" [ "every day" ] )	"example of"/EXAMPLE	"a good health habit"
english(rule1, "exercising every day is an example of a good health habit").
rule1:: isa(A11S1-habit, "a good health habit"), example(E1S1-exercise, A11S1-habit) -> isa(E1S1-exercise, "exercise"), arg(E1S1-exercise, A3S1-day), isa(A3S1-day, "every day").

QUESTION: A decomposer is an organism that (A) hunts and eats animals(B) migrates for the winter(C) breaks down dead plants and animals(D) uses water and sunlight to make food
% ("a decomposer" "be" "" [ "an organism" ] )
% "a decomposer"	"is"/EXAMPLE	("an organism[a decomposer]" "migrate" "" [ "for the winter" ] )
english(rule1, "a decomposer is an organism[a decomposer] that migrates for the winter").
rule1:: isa(A2S1-decomposer, "a decomposer"), example(A2S1-decomposer, E7S1-migrate) -> isa(E7S1-migrate, "migrate"), agent(E7S1-migrate, A5S1-organism), isa(A5S1-organism, "an organism[a decomposer]"), for(E7S1-migrate, A10S1-winter), isa(A10S1-winter, "the winter").

% "a decomposer"	"is"/EXAMPLE	"an organism[a decomposer]"

% "a decomposer"	"is"/EXAMPLE	("an organism[a decomposer]" "break" "")
english(rule1, "a decomposer is an organism[a decomposer] that breaks down dead plants and animals").
rule1:: isa(A2S1-decomposer, "a decomposer"), example(A2S1-decomposer, E7S1-break) -> isa(E7S1-break, "break"), agent(E7S1-break, A5S1-organism), isa(A5S1-organism, "an organism[a decomposer]").

% "a decomposer"	"is"/EXAMPLE	"an organism[a decomposer]"

% "a decomposer"	"is"/EXAMPLE	("an organism[a decomposer]" "use" "water" [ "to make food" ] )
english(rule1, "a decomposer is an organism[a decomposer] that uses water and sunlight to make food").
rule1:: isa(A2S1-decomposer, "a decomposer"), example(A2S1-decomposer, E7S1-use) -> isa(E7S1-use, "use"), agent(E7S1-use, A5S1-organism), isa(A5S1-organism, "an organism[a decomposer]"), object(E7S1-use, A8S1-water), isa(A8S1-water, "water"), arg(E7S1-use, A12S1-make), isa(A12S1-make, "to make food").

% "a decomposer"	"is"/EXAMPLE	("an organism[a decomposer]" "use" "sunlight" [ "to make food" ] )
english(rule2, "a decomposer is an organism[a decomposer] that uses water and sunlight to make food").
rule2:: isa(A2S1-decomposer, "a decomposer"), example(A2S1-decomposer, E7S1-use) -> isa(E7S1-use, "use"), agent(E7S1-use, A5S1-organism), isa(A5S1-organism, "an organism[a decomposer]"), object(E7S1-use, A8S1-water), isa(A8S1-water, "water"), arg(E7S1-use, A12S1-make), isa(A12S1-make, "to make food"), object(E7S1-use, A10S1-sunlight), isa(A10S1-sunlight, "sunlight").

% "a decomposer"	"is"/EXAMPLE	"an organism[a decomposer]"

QUESTION: What is one way to change water from a liquid to a solid? (A) decrease the temperature (B) increase the temperature (C) decrease the mass (D) increase the mass
% ("" "decrease" "the temperature")	"is way"/EFFECT	("" "change" "water" [ "from a liquid", "to a solid" ] )
english(rule1, "decreasing the temperature is one way to change water from a liquid to a solid").
rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid"), effect(E1S1-decrease, E8S1-change) -> isa(E1S1-decrease, "decrease"), object(E1S1-decrease, A3S1-temperature), isa(A3S1-temperature, "the temperature").

% ("" "increase" "the temperature")	"is way"/EFFECT	("" "change" "water" [ "from a liquid", "to a solid" ] )
english(rule1, "increasing the temperature is one way to change water from a liquid to a solid").
rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid"), effect(E1S1-increase, E8S1-change) -> isa(E1S1-increase, "increase"), object(E1S1-increase, A3S1-temperature), isa(A3S1-temperature, "the temperature").

% ("" "decrease" "the mass")	"is way"/EFFECT	("" "change" "water" [ "from a liquid", "to a solid" ] )
english(rule1, "decreasing the mass is one way to change water from a liquid to a solid").
rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid"), effect(E1S1-decrease, E8S1-change) -> isa(E1S1-decrease, "decrease"), object(E1S1-decrease, A3S1-mass), isa(A3S1-mass, "the mass").

% ("" "increase" "the mass")	"is way"/EFFECT	("" "change" "water" [ "from a liquid", "to a solid" ] )
english(rule1, "increasing the mass is one way to change water from a liquid to a solid").
rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid"), effect(E1S1-increase, E8S1-change) -> isa(E1S1-increase, "increase"), object(E1S1-increase, A3S1-mass), isa(A3S1-mass, "the mass").

QUESTION: A student drops a ball. Which force causes the ball to fall to the ground? (A) electricity (B) friction (C) gravity (D) magnetism
% ("A student" "drop" "a ball")
% "electricity"	"causes"/CAUSE	("a ball" "fall" "" [ "to the ground" ] )
english(rule1, "A student drops a ball electricity causes the ball[a ball] to fall to the ground").
rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), object(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground"), cause(A1S2-electricity, E6S2-fall) -> isa(A1S2-electricity, "electricity").

% ("A student" "drop" "a ball")
% "friction"	"causes"/CAUSE	("a ball" "fall" "" [ "to the ground" ] )
english(rule1, "A student drops a ball friction causes the ball[a ball] to fall to the ground").
rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), object(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground"), cause(A1S2-friction, E6S2-fall) -> isa(A1S2-friction, "friction").

% ("A student" "drop" "a ball")
% "gravity"	"causes"/CAUSE	("a ball" "fall" "" [ "to the ground" ] )
english(rule1, "A student drops a ball gravity causes the ball[a ball] to fall to the ground").
rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), object(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground"), cause(A1S2-gravity, E6S2-fall) -> isa(A1S2-gravity, "gravity").

% ("A student" "drop" "" [ "a ball" ] )
% "magnetism"	"causes"/CAUSE	("a ball" "fall" "" [ "to the ground" ] )
english(rule1, "A student drops a ball magnetism causes the ball[a ball] to fall to the ground").
rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), arg(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground"), cause(A1S2-magnetism, E6S2-fall) -> isa(A1S2-magnetism, "magnetism").

QUESTION: What is the main source of energy for the water cycle? (A) electricity(B) erosion(C) gravity(D) sunlight
% "electricity"	"is"/EXAMPLE	"the main source of energy for the water cycle"
english(rule1, "electricity is the main source of energy for the water cycle").
rule1:: isa(A5S1-source, "the main source of energy for the water cycle"), example(A1S1-electricity, A5S1-source) -> isa(A1S1-electricity, "electricity").

% "erosion"	"is"/EXAMPLE	"the main source of energy for the water cycle"
english(rule1, "erosion is the main source of energy for the water cycle").
rule1:: isa(A5S1-source, "the main source of energy for the water cycle"), example(A1S1-erosion, A5S1-source) -> isa(A1S1-erosion, "erosion").

% "gravity"	"is"/EXAMPLE	"the main source of energy for the water cycle"
english(rule1, "gravity is the main source of energy for the water cycle").
rule1:: isa(A5S1-source, "the main source of energy for the water cycle"), example(A1S1-gravity, A5S1-source) -> isa(A1S1-gravity, "gravity").

% "sunlight"	"is"/EXAMPLE	"the main source of energy for the water cycle"
english(rule1, "sunlight is the main source of energy for the water cycle").
rule1:: isa(A5S1-source, "the main source of energy for the water cycle"), example(A1S1-sunlight, A5S1-source) -> isa(A1S1-sunlight, "sunlight").

QUESTION: Which instrument should a student use to measure exactly 10 milliliters (mL) of water? (A) graduated cylinder (B) pan balance (C) ruler (D) thermometer
% ("a student"/?x "use" "a graduated cylinder")	"to"/EFFECT	("a student"/?x "measure" "10 milliliters of water")
english(rule1, "a student should use a graduated cylinder to measure exactly 10 milliliters mL of water").
rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A7S1-cylinder), isa(E9S1-measure, "measure"), agent(E9S1-measure, A2S1-student), object(E9S1-measure, A12S1-milliliter), isa(A12S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E9S1-measure) -> isa(A7S1-cylinder, "a graduated cylinder").

% ("a student"/?x "use" "a graduated cylinder")	"to"/EFFECT	("a student"/?x "measure" "mL")
english(rule2, "a student should use a graduated cylinder to measure exactly 10 milliliters mL of water").
rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A7S1-cylinder), isa(E9S1-measure, "measure"), agent(E9S1-measure, A2S1-student), object(E9S1-measure, A12S1-milliliter), isa(A12S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E9S1-measure), object(E9S1-measure, A14S1-ml), isa(A14S1-ml, "mL") -> isa(A7S1-cylinder, "a graduated cylinder").

% ("a student"/?x "use" "pan balance")	"to"/EFFECT	("a student"/?x "measure" "10 milliliters of water")
english(rule1, "a student should use pan balance to measure exactly 10 milliliters mL of water").
rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-balance), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure) -> isa(A6S1-balance, "pan balance").

% ("a student"/?x "use" "pan balance")	"to"/EFFECT	("a student"/?x "measure" "mL")
english(rule2, "a student should use pan balance to measure exactly 10 milliliters mL of water").
rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-balance), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> isa(A6S1-balance, "pan balance").

% ("a student"/?x "use" "a ruler")	"to"/EFFECT	("a student"/?x "measure" "10 milliliters of water")
english(rule1, "a student should use a ruler to measure exactly 10 milliliters mL of water").
rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-ruler), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure) -> isa(A6S1-ruler, "a ruler").

% ("a student"/?x "use" "a ruler")	"to"/EFFECT	("a student"/?x "measure" "mL")
english(rule2, "a student should use a ruler to measure exactly 10 milliliters mL of water").
rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-ruler), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> isa(A6S1-ruler, "a ruler").

% ("a student"/?x "use" "a thermometer")	"to"/EFFECT	("a student"/?x "measure" "10 milliliters of water")
english(rule1, "a student should use a thermometer to measure exactly 10 milliliters mL of water").
rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-thermometer), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure) -> isa(A6S1-thermometer, "a thermometer").

% ("a student"/?x "use" "a thermometer")	"to"/EFFECT	("a student"/?x "measure" "mL")
english(rule2, "a student should use a thermometer to measure exactly 10 milliliters mL of water").
rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-thermometer), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), effect(E4S1-use, E8S1-measure), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> isa(A6S1-thermometer, "a thermometer").

QUESTION: Which activity is necessary for humans to maintain good health? (A) reading (B) resting (C) driving (D) talking
% ("humans"/?x "read" "")	"necessary"/REQUIREMENT	("humans"/?x "maintain" "good health")

% ("reading" "be" "necessary")
english(rule1, "reading is necessary for humans to maintain good health").
rule1:: agent(E1S1-reading, A5S1-human), isa(A5S1-human, "humans"), isa(E7S1-maintain, "maintain"), agent(E7S1-maintain, A5S1-human), object(E7S1-maintain, A9S1-health), isa(A9S1-health, "good health"), requirement(E1S1-reading, E7S1-maintain), isa(E2S1-be, "be"), agent(E2S1-be, E1S1-reading), object(E2S1-be, A3S1-necessary), isa(A3S1-necessary, "necessary") -> isa(E1S1-reading, "read"), isa(E1S1-reading, "reading").
% ("humans"/?x "rest" "")	"necessary"/REQUIREMENT	("humans"/?x "maintain" "good health")

% ("resting" "be" "necessary")
english(rule1, "resting is necessary for humans to maintain good health").
rule1:: agent(E1S1-rest, A5S1-human), isa(A5S1-human, "humans"), isa(E7S1-maintain, "maintain"), agent(E7S1-maintain, A5S1-human), object(E7S1-maintain, A9S1-health), isa(A9S1-health, "good health"), requirement(E1S1-rest, E7S1-maintain), isa(E2S1-be, "be"), agent(E2S1-be, E1S1-rest), object(E2S1-be, A3S1-necessary), isa(A3S1-necessary, "necessary") -> isa(E1S1-rest, "rest"), isa(E1S1-rest, "resting").
% "driving activity"	"necessary"/REQUIREMENT	("humans" "maintain" "good health")

% ("driving activity" "be" "necessary")
% "talking activity"	"necessary"/REQUIREMENT	("humans" "maintain" "good health")

% ("talking activity" "be" "necessary")
QUESTION: Green plants get the energy they need to make food from (A) air (B) sunlight (C) water (D) soil
% ("green plants"/?x "get" "the energy")	"need to"/EFFECT	("green plants"/?x "make" "" [ "food from air" ] )

% ("green plants" "get" "the energy")
% ("green plants"/?x "get" "the energy")	"need to"/EFFECT	("green plants"/?x "make" "food" [ "from sunlight" ] )
english(rule1, "green plants get the energy they[green plants] need to make food from sunlight").
rule1:: isa(E3S1-get, "get"), agent(E3S1-get, A2S1-plant), isa(A2S1-plant, "green plants"), object(E3S1-get, A5S1-energy), isa(A5S1-energy, "the energy"), isa(E9S1-make, "make"), agent(E9S1-make, A2S1-plant), object(E9S1-make, A10S1-food), isa(A10S1-food, "food"), from(E9S1-make, A12S1-sunlight), effect(E3S1-get, E9S1-make) -> isa(A12S1-sunlight, "sunlight").

% ("green plants"/?x "get" "the energy")	"need to"/EFFECT	("green plants"/?x "make" "" [ "food from water" ] )

% ("green plants" "get" "the energy")
% ("green plants"/?x "get" "the energy")	"need to"/EFFECT	("green plants"/?x "make" "" [ "food from soil" ] )

% ("green plants" "get" "the energy")
QUESTION: When plants and animals die, which organisms help return nutrients to the food chain? (A) decomposers (B) predators (C) prey (D) producers
% "decomposers"	"help"/PURPOSE	("decomposers" "return" "nutrients" [ "to the food chain" ] )
english(rule1, "when plants and animals die decomposers help return nutrients to the food chain").
rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-decomposer, E9S1-return) -> isa(A7S1-decomposer, "decomposers").

% ("decomposers" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("plants" "die" "")
english(rule2, "when plants and animals die decomposers help return nutrients to the food chain").
rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-decomposer, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die) -> isa(A7S1-decomposer, "decomposers").

% ("decomposers" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("animals" "die" "")
english(rule3, "when plants and animals die decomposers help return nutrients to the food chain").
rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-decomposer, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> isa(A7S1-decomposer, "decomposers").

% "predators"	"help"/PURPOSE	("predators" "return" "nutrients" [ "to the food chain" ] )
english(rule1, "when plants and animals die predators help return nutrients to the food chain").
rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-predator, E9S1-return) -> isa(A7S1-predator, "predators").

% ("predators" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("plants" "die" "")
english(rule2, "when plants and animals die predators help return nutrients to the food chain").
rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-predator, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die) -> isa(A7S1-predator, "predators").

% ("predators" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("animals" "die" "")
english(rule3, "when plants and animals die predators help return nutrients to the food chain").
rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-predator, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> isa(A7S1-predator, "predators").

% ("plants"/?x "prey" "help")	"when"/WHEN	("plants"/?x "die" "")
english(rule1, "when plants and animals die prey help return nutrients to the food chain").
rule1:: isa(A2S1-plant, "plants"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), when(E7S1-prey, E5S1-die) -> isa(E7S1-prey, "prey"), agent(E7S1-prey, A2S1-plant), object(E7S1-prey, A8S1-help), isa(A8S1-help, "help").

% ("animals"/?x "prey" "help")	"when"/WHEN	("animals"/?x "die" "")
english(rule2, "when plants and animals die prey help return nutrients to the food chain").
rule2:: isa(A2S1-plant, "plants"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), when(E7S1-prey, E5S1-die), isa(A4S1-animal, "animals"), agent(E5S1-die, A4S1-animal) -> isa(E7S1-prey, "prey"), agent(E7S1-prey, A2S1-plant), object(E7S1-prey, A8S1-help), isa(A8S1-help, "help"), agent(E7S1-prey, A4S1-animal).

% "producers"	"help"/PURPOSE	("producers" "return" "nutrients" [ "to the food chain" ] )
english(rule1, "when plants and animals die producers help return nutrients to the food chain").
rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-producer, E9S1-return) -> isa(A7S1-producer, "producers").

% ("producers" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("plants" "die" "")
english(rule2, "when plants and animals die producers help return nutrients to the food chain").
rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-producer, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die) -> isa(A7S1-producer, "producers").

% ("producers" "return" "nutrients" [ "to the food chain" ] )	"when"/WHEN	("animals" "die" "")
english(rule3, "when plants and animals die producers help return nutrients to the food chain").
rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), purpose(A7S1-producer, E9S1-return), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), when(E9S1-return, E5S1-die), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> isa(A7S1-producer, "producers").

QUESTION: Which animal is preparing for a seasonal change in the environment? (A) a bat flying at night (B) a deer drinking water (C) an owl eating a mouse (D) a squirrel storing nuts
% ("a bat"/?x "fly" "a bat" [ "at night" ] )	""/EFFECT	("a bat"/?x "prepare" "" [ "for a seasonal change in the environment" ] )
english(rule1, "a bat flying at night is preparing for a seasonal change in the environment").
rule1:: isa(E3S1-fly, "fly"), agent(E3S1-fly, A2S1-bat), object(E3S1-fly, A2S1-bat), at(E3S1-fly, A5S1-night), isa(A5S1-night, "night"), isa(E7S1-prepare, "prepare"), agent(E7S1-prepare, A2S1-bat), for(E7S1-prepare, A11S1-change), isa(A11S1-change, "a seasonal change in the environment"), effect(E3S1-fly, E7S1-prepare) -> isa(A2S1-bat, "a bat").

% ("a bat"/?x "fly" "" [ "at night" ] )	""/EFFECT	("a bat"/?x "prepare" "" [ "for a seasonal change in the environment" ] )
english(rule2, "a bat flying at night is preparing for a seasonal change in the environment").
rule2:: isa(E3S1-fly, "fly"), agent(E3S1-fly, A2S1-bat), object(E3S1-fly, A2S1-bat), at(E3S1-fly, A5S1-night), isa(A5S1-night, "night"), isa(E7S1-prepare, "prepare"), agent(E7S1-prepare, A2S1-bat), for(E7S1-prepare, A11S1-change), isa(A11S1-change, "a seasonal change in the environment"), effect(E3S1-fly, E7S1-prepare) -> isa(A2S1-bat, "a bat").

% ("" "prepare" "" [ "for a seasonal change in the environment" ] )
% ("an owl"/?x "eat" "a mouse")	""/EFFECT	("an owl"/?x "prepare" "" [ "for a seasonal change in the environment" ] )
english(rule1, "an owl eating a mouse is preparing for a seasonal change in the environment").
rule1:: isa(E3S1-eat, "eat"), agent(E3S1-eat, A2S1-owl), object(E3S1-eat, A5S1-mouse), isa(A5S1-mouse, "a mouse"), isa(E7S1-prepare, "prepare"), agent(E7S1-prepare, A2S1-owl), for(E7S1-prepare, A11S1-change), isa(A11S1-change, "a seasonal change in the environment"), effect(E3S1-eat, E7S1-prepare) -> isa(A2S1-owl, "an owl").

% ("a squirrel"/?x "store" "nuts")	""/EFFECT	("a squirrel"/?x "prepare" "" [ "for a seasonal change in the environment" ] )
english(rule1, "a squirrel storing nuts is preparing for a seasonal change in the environment").
rule1:: isa(E3S1-store, "store"), agent(E3S1-store, A2S1-squirrel), object(E3S1-store, A4S1-nut), isa(A4S1-nut, "nuts"), isa(E6S1-prepare, "prepare"), agent(E6S1-prepare, A2S1-squirrel), for(E6S1-prepare, A10S1-change), isa(A10S1-change, "a seasonal change in the environment"), effect(E3S1-store, E6S1-prepare) -> isa(A2S1-squirrel, "a squirrel").

QUESTION: What form of energy is being used when a person pushes a wooden block across the floor? (A) mechanical (B) magnetic (C) sound (D) electrical
% ("" "use" "mechanical energy")
% ("" "use" "magnetic energy")
% ("" "use" "sound")
english(rule1, "sound is being used when a person pushes a wooden block across the floor").
rule1:: isa(E4S1-use, "use"), object(E4S1-use, A1S1-sound) -> isa(A1S1-sound, "sound").
% ("" "use" "electrical energy")
QUESTION: Since green plants make their own food, they are called (A) predators (B) prey (C) decomposers (D) producers
% ("green plants" "make" "their[green plants] own food")	"are called"/EXAMPLE	"predators"
english(rule1, "since green plants make their[green plants] own food they[green plants] are called predators").
rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food"), example(E4S1-make, A12S1-predator) -> isa(A12S1-predator, "predators").

% ("" "call" "green plants" [ "since green plants make their[green plants] own food" ] )
% ("green plants" "make" "their[green plants] own food")	"are called"/EXAMPLE	"decomposers"
english(rule1, "since green plants make their[green plants] own food they[green plants] are called decomposers").
rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food"), example(E4S1-make, A12S1-decomposer) -> isa(A12S1-decomposer, "decomposers").

% ("green plants" "make" "their[green plants] own food")	"are called"/EXAMPLE	"producers"
english(rule1, "since green plants make their[green plants] own food they[green plants] are called producers").
rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food"), example(E4S1-make, A12S1-producer) -> isa(A12S1-producer, "producers").

QUESTION: Which human activity most often has a harmful effect on the environment? (A) breathing (B) growing (C) planting (D) polluting
% ("breathing" "have" "a harmful effect on the environment")
english(rule1, "breathing most often has a harmful effect on the environment").
rule1:: isa(E4S1-have, "have"), agent(E4S1-have, A1S1-breathe), object(E4S1-have, A7S1-effect), isa(A7S1-effect, "a harmful effect on the environment") -> isa(A1S1-breathe, "breathing").
% ("a harmful effect on the environment" "grow" "")
english(rule1, "growing most often has a harmful effect on the environment").
rule1::  -> isa(E1S1-grow, "grow"), agent(E1S1-grow, A7S1-effect), isa(A7S1-effect, "a harmful effect on the environment").
% ("planting" "have" "a harmful effect on the environment")
english(rule1, "planting most often has a harmful effect on the environment").
rule1:: isa(E4S1-have, "have"), agent(E4S1-have, A1S1-plant), object(E4S1-have, A7S1-effect), isa(A7S1-effect, "a harmful effect on the environment") -> isa(A1S1-plant, "planting").
% ("polluting" "have" "a harmful effect on the environment")
english(rule1, "polluting most often has a harmful effect on the environment").
rule1:: isa(E4S1-have, "have"), agent(E4S1-have, A1S1-pollute), object(E4S1-have, A7S1-effect), isa(A7S1-effect, "a harmful effect on the environment") -> isa(A1S1-pollute, "polluting").
QUESTION: A dog opens its mouth and lets its tongue hang out. A human's body produces sweat. These are two ways that organisms may adjust to (A) cold temperatures (B) hot temperatures (C) a shortage of food (D) a shortage of drinking water
% ("A dog" "open" "its mouth")
% ("A human 's body" "produce" "sweat")
% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "these" [ "to cold temperatures" ] )
english(rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to cold temperatures").
rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-temperature), example(A1S3-these, E8S3-adjust) -> isa(A11S3-temperature, "cold temperatures").

% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "two ways[these]" [ "to cold temperatures" ] )
english(rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to cold temperatures").
rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-temperature), example(A1S3-these, E8S3-adjust), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> isa(A11S3-temperature, "cold temperatures").

% ("A dog" "open" "its mouth")
% ("A human 's body" "produce" "sweat")
% ("these" "be" "" [ "two ways" ] )
% ("A dog" "open" "its mouth")
% ("A human 's body" "produce" "sweat")
% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "these" [ "to a shortage of food" ] )
english(rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of food").
rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), example(A1S3-these, E8S3-adjust) -> isa(A11S3-shortage, "a shortage of food").

% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "two ways[these]" [ "to a shortage of food" ] )
english(rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of food").
rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), example(A1S3-these, E8S3-adjust), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> isa(A11S3-shortage, "a shortage of food").

% ("A dog" "open" "its mouth")
% ("A human 's body" "produce" "sweat")
% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "these" [ "to a shortage of drinking water" ] )
english(rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of drinking water").
rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), example(A1S3-these, E8S3-adjust) -> isa(A11S3-shortage, "a shortage of drinking water").

% "these"	"are ways[these]"/EXAMPLE	("organisms" "adjust" "two ways[these]" [ "to a shortage of drinking water" ] )
english(rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of drinking water").
rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), example(A1S3-these, E8S3-adjust), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> isa(A11S3-shortage, "a shortage of drinking water").

QUESTION: A student is growing some plants for an experiment. She notices small white spots on the leaves. Which tool should she use to get a better look at the spots? (A) thermometer (B) hand lens (C) graduated cylinder (D) balance
% ("A student" "grow" "some plants" [ "for an experiment" ] )
% ("She" "notify" "small white spots" [ "on the leaves" ] )
% ("She"/?x "use" "a thermometer")	"to"/EFFECT	("She"/?x "get" "a better look at the spots[small white spots]")
english(rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a thermometer to get a better look at the spots[small white spots]").
rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A5S3-thermometer), isa(E7S3-get, "get"), agent(E7S3-get, A1S2-she), object(E7S3-get, A10S3-look), isa(A10S3-look, "a better look at the spots[small white spots]"), effect(E3S3-use, E7S3-get) -> isa(A5S3-thermometer, "a thermometer").

% ("A student" "grow" "some plants" [ "for an experiment" ] )
% ("She" "notify" "small white spots" [ "on the leaves" ] )
% ("She"/?x "use" "a hand lens")	"to"/EFFECT	("She"/?x "get" "a better look at the spots[small white spots]")
english(rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a hand lens to get a better look at the spots[small white spots]").
rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A6S3-lens), isa(E8S3-get, "get"), agent(E8S3-get, A1S2-she), object(E8S3-get, A11S3-look), isa(A11S3-look, "a better look at the spots[small white spots]"), effect(E3S3-use, E8S3-get) -> isa(A6S3-lens, "a hand lens").

% ("A student" "grow" "some plants" [ "for an experiment" ] )
% ("She" "notify" "small white spots" [ "on the leaves" ] )
% ("She"/?x "use" "a graduated cylinder")	"to"/EFFECT	("She"/?x "get" "a better look at the spots[small white spots]")
english(rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a graduated cylinder to get a better look at the spots[small white spots]").
rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A6S3-cylinder), isa(E8S3-get, "get"), agent(E8S3-get, A1S2-she), object(E8S3-get, A11S3-look), isa(A11S3-look, "a better look at the spots[small white spots]"), effect(E3S3-use, E8S3-get) -> isa(A6S3-cylinder, "a graduated cylinder").

% ("A student" "grow" "some plants" [ "for an experiment" ] )
% ("She" "notify" "small white spots" [ "on the leaves" ] )
% ("She"/?x "use" "a balance")	"to"/EFFECT	("She"/?x "get" "a better look at the spots[small white spots]")
english(rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a balance to get a better look at the spots[small white spots]").
rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A5S3-balance), isa(E7S3-get, "get"), agent(E7S3-get, A1S2-she), object(E7S3-get, A10S3-look), isa(A10S3-look, "a better look at the spots[small white spots]"), effect(E3S3-use, E7S3-get) -> isa(A5S3-balance, "a balance").

QUESTION: A fox grows thicker fur as a season changes. This adaptation helps the fox to (A) find food(B) keep warmer(C) grow stronger(D) escape from predators
% ("A fox" "grow" "thicker fur" [ "as a season changes" ] )
% ("A fox"/?x "adapt" "")	"helps"/PURPOSE	("A fox"/?x "find" "food")
english(rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to find food").
rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox), purpose(E2S2-adaptation, E7S2-find) -> isa(E7S2-find, "find"), agent(E7S2-find, A2S1-fox), object(E7S2-find, A8S2-food), isa(A8S2-food, "food").

% ("A fox" "grow" "thicker fur" [ "as a season changes" ] )
% ("A fox"/?x "adapt" "")	"helps"/PURPOSE	("A fox"/?x "keep" "" [ "warmer" ] )
english(rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to keep warmer").
rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox), purpose(E2S2-adaptation, E7S2-keep) -> isa(E7S2-keep, "keep"), agent(E7S2-keep, A2S1-fox), arg(E7S2-keep, A8S2-warmer), isa(A8S2-warmer, "warmer").

% ("A fox" "grow" "thicker fur" [ "as a season changes" ] )
% ("A fox"/?x "adapt" "")	"helps"/PURPOSE	("A fox"/?x "grow" "" [ "stronger" ] )
english(rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to grow stronger").
rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox), purpose(E2S2-adaptation, E7S2-grow) -> isa(E7S2-grow, "grow"), agent(E7S2-grow, A2S1-fox), arg(E7S2-grow, A8S2-stronger), isa(A8S2-stronger, "stronger").

% ("A fox" "grow" "thicker fur" [ "as a season changes" ] )
% ("A fox"/?x "adapt" "")	"helps"/PURPOSE	("A fox"/?x "escape" "from predators")
english(rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to escape from predators").
rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox), purpose(E2S2-adaptation, E7S2-escape) -> isa(E7S2-escape, "escape"), agent(E7S2-escape, A2S1-fox), object(E7S2-escape, A8S2-from), isa(A8S2-from, "from predators").

QUESTION: Which adaptation often helps an animal attract a mate? (A) hibernation (B) camouflage (C) coloration (D) migration
% ("an animal"/?x "hibernate" "")	"helps"/PURPOSE	("an animal"/?x "attract" "a mate")

% ("hibernation" "help" "" [ "an animal attract a mate" ] )
english(rule1, "hibernation often helps an animal attract a mate").
rule1:: agent(E1S1-hibernation, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate"), purpose(E1S1-hibernation, E6S1-attract), isa(E3S1-help, "help"), agent(E3S1-help, E1S1-hibernation), arg(E3S1-help, E6S1-attract), isa(E6S1-attract, "an animal attract a mate") -> isa(E1S1-hibernation, "hibernate"), isa(E1S1-hibernation, "hibernation").
% "camouflage"	"helps"/PURPOSE	("an animal" "attract" "a mate")
english(rule1, "camouflage often helps an animal attract a mate").
rule1:: isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), isa(A5S1-animal, "an animal"), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate"), purpose(A1S1-camouflage, E6S1-attract) -> isa(A1S1-camouflage, "camouflage").

% ("an animal"/?x "color" "")	"helps"/PURPOSE	("an animal"/?x "attract" "a mate")

% ("coloration" "help" "" [ "an animal attract a mate" ] )
english(rule1, "coloration often helps an animal attract a mate").
rule1:: agent(E1S1-coloration, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate"), purpose(E1S1-coloration, E6S1-attract), isa(E3S1-help, "help"), agent(E3S1-help, E1S1-coloration), arg(E3S1-help, E6S1-attract), isa(E6S1-attract, "an animal attract a mate") -> isa(E1S1-coloration, "color"), isa(E1S1-coloration, "coloration").
% ("an animal"/?x "migrate" "")	"helps"/PURPOSE	("an animal"/?x "attract" "a mate")

% ("migration" "help" "" [ "an animal attract a mate" ] )
english(rule1, "migration often helps an animal attract a mate").
rule1:: agent(E1S1-migration, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate"), purpose(E1S1-migration, E6S1-attract), isa(E3S1-help, "help"), agent(E3S1-help, E1S1-migration), arg(E3S1-help, E6S1-attract), isa(E6S1-attract, "an animal attract a mate") -> isa(E1S1-migration, "migrate"), isa(E1S1-migration, "migration").
QUESTION: Animals get energy for growth and repair from (A) soil (B) food (C) water (D) air
% ("animals" "get" "energy" [ "for growth from soil", "for repair" ] )
% ("animals" "get" "energy" [ "for growth from food", "for repair" ] )
% ("animals" "get" "energy" [ "for growth from water", "for repair" ] )
% ("animals" "get" "energy" [ "for growth from air", "for repair" ] )
QUESTION: A car skids along the road and smoke appears to be coming from under the tires. The heat that produces the smoke is caused by (A) magnetism (B) sound (C) light (D) friction
% ("A car skids along the road and smoke" "appear" "")
% "magnetism"	"caused"/CAUSE	("the heat" "produce" "the smoke")
english(rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by magnetism").
rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke"), cause(A10S2-magnetism, E4S2-produce) -> isa(A10S2-magnetism, "magnetism").

% ("A car skids along the road and smoke" "appear" "")
% "sound"	"caused"/CAUSE	("the heat" "produce" "the smoke")
english(rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by sound").
rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke"), cause(A10S2-sound, E4S2-produce) -> isa(A10S2-sound, "sound").

% ("A car skids along the road and smoke" "appear" "")
% "light"	"caused"/CAUSE	("the heat" "produce" "the smoke")
english(rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by light").
rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke"), cause(A10S2-light, E4S2-produce) -> isa(A10S2-light, "light").

% ("A car skids along the road and smoke" "appear" "")
% "friction"	"caused"/CAUSE	("the heat" "produce" "the smoke")
english(rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by friction").
rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke"), cause(A10S2-friction, E4S2-produce) -> isa(A10S2-friction, "friction").


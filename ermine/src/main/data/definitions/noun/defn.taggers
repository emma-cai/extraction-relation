RelClause := TypedOpenRegex {
   (?: <string=",">? <string=/that|which|who/>)
}

DefnPronoun := CaseInsensitiveKeywordTagger {
    it
}

//consume DefnIsa := TypedOpenRegex {
//    (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NGNoDetSingle) <string="'">?) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>:@NGNoDetSingle) (<string=",">? (<Qualities>: @AP3NoVb))? (<string=",">? <string="with"> (<Properties>: @NGMultiple))?)
// |  (?: (<DefinedTerm>:@NGNoDetSingle) <string=":"> ((<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? (@DefnPronoun? | (@Det? <string="'">? @NGNoDetSingle <string="'">?)) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)))? @Det? (<IsaWhat>:@NGNoDetSingle) (<string=",">? (<Qualities>: @AP3NoVb))? (<string=","> <string="with"> (<Properties>: @NGMultiple))?)
// |  (?: (<DefinedTerm>:@NGNoDetSingle) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)) (<IsaWhat>:@NGMultiple))
// |  (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NGNoDetSingle) <string="'">?) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>: @NGMultiple))
//}

consume DefnIsa := TypedOpenRegex {
    (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NGNoDetSingle) <string="'">?) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>:@NGNoDetSingle) (<string=",">? (<Qualities>: @AP3NoVb))? (<string=",">? <string="with"> (<Properties>: @NGMultiple))?)
 |  (?: (<DefinedTerm>:@NGNoDetSingle) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)?)? ((@DefnPronoun | (@Det? <string="'">? @NGNoDetSingle <string="'">?)) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)))? @Det? (<IsaWhat>:@NGNoDetSingle) (<string=",">? (<Qualities>: @AP3NoVb))? (<string=","> <string="with"> (<Properties>: @NGMultiple))?)
 |  (?: (<DefinedTerm>:@NGNoDetSingle) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)?)? @Det? (<IsaWhat>:@NGMultiple))
 |  (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NGNoDetSingle) <string="'">?) ((<string=/is|was|are|were|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>: @NGMultiple))
}

consume DefnPattern1 := TypedOpenRegex {
  (?:  (<DefnIsaPart>: @DefnIsa) @RelClause)
}

consume DefnPattern2_1 := TypedOpenRegex {
   (?: (<DefnIsaPart>: @DefnIsa) (<string=/when|where|whereby/>))
}

consume DefnPattern2_2 := TypedOpenRegex {
   (?: (<DefnIsaPart>: @DefnIsa) ((<Prep>: <pos="IN">) <string=/which|whom/>))
}

//consume DefnPattern3 := TypedOpenRegex {
//  (?:  (<Fact>: @DefnIsa))
//}

consume DefnPattern5 := TypedOpenRegex {
  (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NGNoDetSingle) <string="'">?) (<string="is"> (<string="where"> | <string="when">)))
 | (?: ((<DefinedTerm>:@NGNoDetSingle) <string=":">) (<string=/In/>  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? @NGNoDetSingle <string="'">?) (<string="is"> <string="where" | string="when">))
}

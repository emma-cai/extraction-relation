S1 := TypedOpenRegex {
  (<Arg1>:(@NP | <pos="EX">)) <string="to">? (<VP>:@VP)
}

S := TypedOpenRegex {
  (?: ((<AntecedentS>: @S1) (<Rel>: @EffectRel | @EffectRelTo | @CauseRel | @FunctionRel | @FunctionRelTo | @ExampleRel | @RequiredRel | @RequiredRelTo | @RelClause | <lemma=/when|as/>) (<ConsequentS>: @S1)))
}

VP3 := TypedOpenRegex {
  (?: ((<AntecedentVP>: @VP1) (<Rel>: @EffectRel | @EffectRelTo | @CauseRel | @FunctionRel | @FunctionRelTo | @ExampleRel | @RequiredRel | @RequiredRelTo | @RelClause | <lemma=/when|as/> | <string="to">) (<ConsequentS>: @S1)))
}

VP2 := TypedOpenRegex {
  (?: ((<AntecedentVP>: @VP1) (<Rel>: @EffectRel | @EffectRelTo | @CauseRel | @FunctionRel | @FunctionRelTo | @ExampleRel | @RequiredRel | @RequiredRelTo | <lemma=/when|as/> | <string="to">) (<ConsequentVP>: @VP1)))
}

consume RelClauseDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnRelClausePattern) (<Facts>: (@S | @S1 | @VP3 | @VP2 | @VP)))
}

consume WhenWhereDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnWhenWherePattern) (<Facts>: (@S | @S1)))
}

consume WhichWhomDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnWhichWhomPattern) (<Facts>: (@S | @S1)))
}

consume IsaFactsDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnIsa) <string=",">? (<Facts>: (@S | @S1 | @VP3 | @VP2 | @VP)))
}

consume IsaToFactsDefinition := TypedOpenRegex {
   (?: ((<Isa>:  @DefnIsa) (<PP>: @PP2)? (<pos="TO"> (<Facts>: (@VP | @VP2 | @VP3)))))
}

consume IsaDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnIsa (<PP>: @PP2)?))
}

consume IsWhereDefinition := TypedOpenRegex {
   (?: (<Isa>: @DefnIsWherePattern) (<Facts>: (@S | @S1)))
}

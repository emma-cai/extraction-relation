english(june2014questions.out.rule1, "gravity causes rocks to roll downhill").
pretty(june2014questions.out.rule1, "roll('rocks', 'downhill') -> CAUSES(Q, roll), Q='gravity'.").
june2014questions.out.rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill") -> cause(A1S1-gravity, E5S1-roll), isa(A1S1-gravity, "gravity").
english(june2014questions.out.rule1, "friction causes rocks to roll downhill").
pretty(june2014questions.out.rule1, "roll('rocks', 'downhill') -> CAUSES(Q, roll), Q='friction'.").
june2014questions.out.rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill") -> cause(A1S1-friction, E5S1-roll), isa(A1S1-friction, "friction").
english(june2014questions.out.rule1, "erosion causes rocks to roll downhill").
pretty(june2014questions.out.rule1, "roll('rocks', 'downhill') -> CAUSES(Q, roll), Q='erosion'.").
june2014questions.out.rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill") -> cause(A1S1-erosion, E5S1-roll), isa(A1S1-erosion, "erosion").
english(june2014questions.out.rule1, "magnetism causes rocks to roll downhill").
pretty(june2014questions.out.rule1, "roll('rocks', 'downhill') -> CAUSES(Q, roll), Q='magnetism'.").
june2014questions.out.rule1:: isa(E5S1-roll, "roll"), agent(E5S1-roll, A3S1-rock), isa(A3S1-rock, "rocks"), arg(E5S1-roll, A6S1-downhill), isa(A6S1-downhill, "downhill") -> cause(A1S1-magnetism, E5S1-roll), isa(A1S1-magnetism, "magnetism").
english(june2014questions.out.rule1, "watching television is an example[watching television] of a good health habit").
pretty(june2014questions.out.rule1, "isa(habit, 'a good health habit') -> EXAMPLE_OF(Q, habit), Q='watching television'.").
june2014questions.out.rule1:: isa(A10S1-habit, "a good health habit") -> example(A2S1-television, A10S1-habit), isa(A2S1-television, "watching television").
english(june2014questions.out.rule1, "smoking cigarettes is an example of a good health habit").
pretty(june2014questions.out.rule1, "isa(habit, 'a good health habit') -> EXAMPLE_OF(Q, habit), Q='smoking cigarettes'.").
june2014questions.out.rule1:: isa(A10S1-habit, "a good health habit") -> example(A2S1-cigarette, A10S1-habit), isa(A2S1-cigarette, "smoking cigarettes").
english(june2014questions.out.rule1, "eating candy is an example of a good health habit").
pretty(june2014questions.out.rule1, "isa(habit, 'a good health habit') -> EXAMPLE_OF(Q, habit), Q=eat(X, 'candy').").
june2014questions.out.rule1:: isa(A10S1-habit, "a good health habit") -> example(E1S1-eat, A10S1-habit), isa(E1S1-eat, "eat"), object(E1S1-eat, A2S1-candy), isa(A2S1-candy, "candy").
english(june2014questions.out.rule1, "a decomposer is an organism[a decomposer] that hunts and eats animals").
pretty(june2014questions.out.rule1, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=hunt('an organism[a decomposer]', 'animals').").
june2014questions.out.rule1:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-hunt, "hunt"), agent(E7S1-hunt, A5S1-organism), object(E7S1-hunt, A10S1-animal), isa(A10S1-animal, "animals").
english(june2014questions.out.rule2, "a decomposer is an organism[a decomposer] that hunts and eats animals").
pretty(june2014questions.out.rule2, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=hunt('an organism[a decomposer]', 'animals').").
june2014questions.out.rule2:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-hunt, "hunt"), agent(E7S1-hunt, A5S1-organism), object(E7S1-hunt, A10S1-animal), isa(A10S1-animal, "animals"), isa(E9S1-eat, "eat"), agent(E9S1-eat, A5S1-organism).
english(june2014questions.out.rule1, "a decomposer is an organism[a decomposer] that migrates for the winter").
pretty(june2014questions.out.rule1, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=migrate('an organism[a decomposer]', for('the winter')).").
june2014questions.out.rule1:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-migrate, "migrate"), agent(E7S1-migrate, A5S1-organism), for(E7S1-migrate, A10S1-winter), isa(A10S1-winter, "the winter").
english(june2014questions.out.rule1, "a decomposer is an organism[a decomposer] that breaks down dead plants and animals").
pretty(june2014questions.out.rule1, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=break('an organism[a decomposer]').").
june2014questions.out.rule1:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-break, "break"), agent(E7S1-break, A5S1-organism).
english(june2014questions.out.rule1, "a decomposer is an organism[a decomposer] that uses water and sunlight to make food").
pretty(june2014questions.out.rule1, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=use('an organism[a decomposer]', 'water', 'make food').").
june2014questions.out.rule1:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-use, "use"), agent(E7S1-use, A5S1-organism), object(E7S1-use, A8S1-water), isa(A8S1-water, "water"), arg(E7S1-use, A12S1-make), isa(A12S1-make, "to make food").
english(june2014questions.out.rule2, "a decomposer is an organism[a decomposer] that uses water and sunlight to make food").
pretty(june2014questions.out.rule2, "isa(decomposer, 'a decomposer') -> EXAMPLE_OF(decomposer, organism), Q=use('an organism[a decomposer]', 'water', 'sunlight', 'make food').").
june2014questions.out.rule2:: isa(A2S1-decomposer, "a decomposer"), isa(A5S1-organism, "an organism[a decomposer]"), isa(A2S1-decomposer, A5S1-organism) -> example(A2S1-decomposer, A5S1-organism), isa(E7S1-use, "use"), agent(E7S1-use, A5S1-organism), object(E7S1-use, A8S1-water), isa(A8S1-water, "water"), arg(E7S1-use, A12S1-make), isa(A12S1-make, "to make food"), object(E7S1-use, A10S1-sunlight), isa(A10S1-sunlight, "sunlight").
english(june2014questions.out.rule1, "decreasing the temperature is one way to change water from a liquid to a solid").
pretty(june2014questions.out.rule1, "change(X, 'water', from('a liquid'), to('a solid')) -> HAS_EFFECT(Q, change), Q=decrease(X, 'the temperature').").
june2014questions.out.rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid") -> effect(E1S1-decrease, E8S1-change), isa(E1S1-decrease, "decrease"), object(E1S1-decrease, A3S1-temperature), isa(A3S1-temperature, "the temperature").
english(june2014questions.out.rule1, "increasing the temperature is one way to change water from a liquid to a solid").
pretty(june2014questions.out.rule1, "change(X, 'water', from('a liquid'), to('a solid')) -> HAS_EFFECT(Q, change), Q=increase(X, 'the temperature').").
june2014questions.out.rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid") -> effect(E1S1-increase, E8S1-change), isa(E1S1-increase, "increase"), object(E1S1-increase, A3S1-temperature), isa(A3S1-temperature, "the temperature").
english(june2014questions.out.rule1, "decreasing the mass is one way to change water from a liquid to a solid").
pretty(june2014questions.out.rule1, "change(X, 'water', from('a liquid'), to('a solid')) -> HAS_EFFECT(Q, change), Q=decrease(X, 'the mass').").
june2014questions.out.rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid") -> effect(E1S1-decrease, E8S1-change), isa(E1S1-decrease, "decrease"), object(E1S1-decrease, A3S1-mass), isa(A3S1-mass, "the mass").
english(june2014questions.out.rule1, "increasing the mass is one way to change water from a liquid to a solid").
pretty(june2014questions.out.rule1, "change(X, 'water', from('a liquid'), to('a solid')) -> HAS_EFFECT(Q, change), Q=increase(X, 'the mass').").
june2014questions.out.rule1:: isa(E8S1-change, "change"), object(E8S1-change, A9S1-water), isa(A9S1-water, "water"), from(E8S1-change, A12S1-liquid), isa(A12S1-liquid, "a liquid"), to(E8S1-change, A15S1-solid), isa(A15S1-solid, "a solid") -> effect(E1S1-increase, E8S1-change), isa(E1S1-increase, "increase"), object(E1S1-increase, A3S1-mass), isa(A3S1-mass, "the mass").
english(june2014questions.out.rule1, "A student drops a ball electricity causes the ball[a ball] to fall to the ground").
pretty(june2014questions.out.rule1, "drop('A student', 'a ball'), fall('a ball', to('the ground')) -> CAUSES(Q, fall), Q='electricity'.").
june2014questions.out.rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), object(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground") -> cause(A1S2-electricity, E6S2-fall), isa(A1S2-electricity, "electricity").
english(june2014questions.out.rule1, "A student drops a ball friction causes the ball[a ball] to fall to the ground").
pretty(june2014questions.out.rule1, "drop('A student', 'a ball'), fall('a ball', to('the ground')) -> CAUSES(Q, fall), Q='friction'.").
june2014questions.out.rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), arg(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground") -> cause(A1S2-friction, E6S2-fall), isa(A1S2-friction, "friction").
english(june2014questions.out.rule1, "A student drops a ball gravity causes the ball[a ball] to fall to the ground").
pretty(june2014questions.out.rule1, "drop('A student', 'a ball'), fall('a ball', to('the ground')) -> CAUSES(Q, fall), Q='gravity'.").
june2014questions.out.rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), arg(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground") -> cause(A1S2-gravity, E6S2-fall), isa(A1S2-gravity, "gravity").
english(june2014questions.out.rule1, "A student drops a ball magnetism causes the ball[a ball] to fall to the ground").
pretty(june2014questions.out.rule1, "drop('A student', 'a ball'), fall('a ball', to('the ground')) -> CAUSES(Q, fall), Q='magnetism'.").
june2014questions.out.rule1:: isa(E3S1-drop, "drop"), agent(E3S1-drop, A2S1-student), isa(A2S1-student, "A student"), object(E3S1-drop, A5S1-ball), isa(A5S1-ball, "a ball"), isa(E6S2-fall, "fall"), agent(E6S2-fall, A5S1-ball), to(E6S2-fall, A9S2-ground), isa(A9S2-ground, "the ground") -> cause(A1S2-magnetism, E6S2-fall), isa(A1S2-magnetism, "magnetism").
english(june2014questions.out.rule1, "electricity is the main source of energy for the water cycle").
pretty(june2014questions.out.rule1, "isa(source, 'the main source of energy for the water cycle') -> EXAMPLE_OF(Q, source), Q='electricity'.").
june2014questions.out.rule1:: isa(A5S1-source, "the main source of energy for the water cycle") -> example(A1S1-electricity, A5S1-source), isa(A1S1-electricity, "electricity").
english(june2014questions.out.rule1, "erosion is the main source of energy for the water cycle").
pretty(june2014questions.out.rule1, "isa(source, 'the main source of energy for the water cycle') -> EXAMPLE_OF(Q, source), Q='erosion'.").
june2014questions.out.rule1:: isa(A5S1-source, "the main source of energy for the water cycle") -> example(A1S1-erosion, A5S1-source), isa(A1S1-erosion, "erosion").
english(june2014questions.out.rule1, "gravity is the main source of energy for the water cycle").
pretty(june2014questions.out.rule1, "isa(source, 'the main source of energy for the water cycle') -> EXAMPLE_OF(Q, source), Q='gravity'.").
june2014questions.out.rule1:: isa(A5S1-source, "the main source of energy for the water cycle") -> example(A1S1-gravity, A5S1-source), isa(A1S1-gravity, "gravity").
english(june2014questions.out.rule1, "sunlight is the main source of energy for the water cycle").
pretty(june2014questions.out.rule1, "isa(source, 'the main source of energy for the water cycle') -> EXAMPLE_OF(Q, source), Q='sunlight'.").
june2014questions.out.rule1:: isa(A5S1-source, "the main source of energy for the water cycle") -> example(A1S1-sunlight, A5S1-source), isa(A1S1-sunlight, "sunlight").
english(june2014questions.out.rule1, "a student should use a graduated cylinder to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule1, "use('a student', Q), measure('a student', '10 milliliters of water') -> HAS_EFFECT(use, measure), Q='a graduated cylinder'.").
june2014questions.out.rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A7S1-cylinder), isa(E9S1-measure, "measure"), agent(E9S1-measure, A2S1-student), object(E9S1-measure, A12S1-milliliter), isa(A12S1-milliliter, "10 milliliters of water") -> effect(E4S1-use, E9S1-measure), isa(A7S1-cylinder, "a graduated cylinder").
english(june2014questions.out.rule2, "a student should use a graduated cylinder to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule2, "use('a student', Q), measure('a student', '10 milliliters of water', 'mL') -> HAS_EFFECT(use, measure), Q='a graduated cylinder'.").
june2014questions.out.rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A7S1-cylinder), isa(E9S1-measure, "measure"), agent(E9S1-measure, A2S1-student), object(E9S1-measure, A12S1-milliliter), isa(A12S1-milliliter, "10 milliliters of water"), object(E9S1-measure, A14S1-ml), isa(A14S1-ml, "mL") -> effect(E4S1-use, E9S1-measure), isa(A7S1-cylinder, "a graduated cylinder").
english(june2014questions.out.rule1, "a student should use pan balance to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule1, "use('a student', Q), measure('a student', '10 milliliters of water') -> HAS_EFFECT(use, measure), Q='pan balance'.").
june2014questions.out.rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-balance), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water") -> effect(E4S1-use, E8S1-measure), isa(A6S1-balance, "pan balance").
english(june2014questions.out.rule2, "a student should use pan balance to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule2, "use('a student', Q), measure('a student', '10 milliliters of water', 'mL') -> HAS_EFFECT(use, measure), Q='pan balance'.").
june2014questions.out.rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-balance), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> effect(E4S1-use, E8S1-measure), isa(A6S1-balance, "pan balance").
english(june2014questions.out.rule1, "a student should use a ruler to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule1, "use('a student', Q), measure('a student', '10 milliliters of water') -> HAS_EFFECT(use, measure), Q='a ruler'.").
june2014questions.out.rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-ruler), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water") -> effect(E4S1-use, E8S1-measure), isa(A6S1-ruler, "a ruler").
english(june2014questions.out.rule2, "a student should use a ruler to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule2, "use('a student', Q), measure('a student', '10 milliliters of water', 'mL') -> HAS_EFFECT(use, measure), Q='a ruler'.").
june2014questions.out.rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-ruler), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> effect(E4S1-use, E8S1-measure), isa(A6S1-ruler, "a ruler").
english(june2014questions.out.rule1, "a student should use a thermometer to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule1, "use('a student', Q), measure('a student', '10 milliliters of water') -> HAS_EFFECT(use, measure), Q='a thermometer'.").
june2014questions.out.rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-thermometer), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water") -> effect(E4S1-use, E8S1-measure), isa(A6S1-thermometer, "a thermometer").
english(june2014questions.out.rule2, "a student should use a thermometer to measure exactly 10 milliliters mL of water").
pretty(june2014questions.out.rule2, "use('a student', Q), measure('a student', '10 milliliters of water', 'mL') -> HAS_EFFECT(use, measure), Q='a thermometer'.").
june2014questions.out.rule2:: isa(E4S1-use, "use"), agent(E4S1-use, A2S1-student), isa(A2S1-student, "a student"), object(E4S1-use, A6S1-thermometer), isa(E8S1-measure, "measure"), agent(E8S1-measure, A2S1-student), object(E8S1-measure, A11S1-milliliter), isa(A11S1-milliliter, "10 milliliters of water"), object(E8S1-measure, A13S1-ml), isa(A13S1-ml, "mL") -> effect(E4S1-use, E8S1-measure), isa(A6S1-thermometer, "a thermometer").
english(june2014questions.out.rule1, "reading is necessary for humans to maintain good health").
pretty(june2014questions.out.rule1, "maintain('humans', 'good health') -> HAS_REQUIREMENT(Q, maintain), Q=read('humans').").
june2014questions.out.rule1:: agent(E1S1-reading, A5S1-human), isa(A5S1-human, "humans"), isa(E7S1-maintain, "maintain"), agent(E7S1-maintain, A5S1-human), object(E7S1-maintain, A9S1-health), isa(A9S1-health, "good health") -> requirement(E1S1-reading, E7S1-maintain), isa(E1S1-reading, "read").
english(june2014questions.out.rule1, "resting is necessary for humans to maintain good health").
pretty(june2014questions.out.rule1, "maintain('humans', 'good health') -> HAS_REQUIREMENT(Q, maintain), Q=rest('humans').").
june2014questions.out.rule1:: agent(E1S1-rest, A5S1-human), isa(A5S1-human, "humans"), isa(E7S1-maintain, "maintain"), agent(E7S1-maintain, A5S1-human), object(E7S1-maintain, A9S1-health), isa(A9S1-health, "good health") -> requirement(E1S1-rest, E7S1-maintain), isa(E1S1-rest, "rest").
english(june2014questions.out.rule1, "green plants get the energy they[green plants] need to make food from air").
pretty(june2014questions.out.rule1, "get('green plants', 'the energy'), make('green plants', 'food from air') -> HAS_EFFECT(get, make), Q='air'.").
june2014questions.out.rule1:: isa(E3S1-get, "get"), agent(E3S1-get, A2S1-plant), isa(A2S1-plant, "green plants"), object(E3S1-get, A5S1-energy), isa(A5S1-energy, "the energy"), isa(E9S1-make, "make"), agent(E9S1-make, A2S1-plant), arg(E9S1-make, A10S1-food) -> effect(E3S1-get, E9S1-make), isa(A10S1-food, "food from air").
english(june2014questions.out.rule1, "green plants get the energy they[green plants] need to make food from sunlight").
pretty(june2014questions.out.rule1, "get('green plants', 'the energy'), make('green plants', 'food', from(Q)) -> HAS_EFFECT(get, make), Q='sunlight'.").
june2014questions.out.rule1:: isa(E3S1-get, "get"), agent(E3S1-get, A2S1-plant), isa(A2S1-plant, "green plants"), object(E3S1-get, A5S1-energy), isa(A5S1-energy, "the energy"), isa(E9S1-make, "make"), agent(E9S1-make, A2S1-plant), object(E9S1-make, A10S1-food), isa(A10S1-food, "food"), from(E9S1-make, A12S1-sunlight) -> effect(E3S1-get, E9S1-make), isa(A12S1-sunlight, "sunlight").
english(june2014questions.out.rule1, "green plants get the energy they[green plants] need to make food from water").
pretty(june2014questions.out.rule1, "get('green plants', 'the energy'), make('green plants', 'food from water') -> HAS_EFFECT(get, make), Q='water'.").
june2014questions.out.rule1:: isa(E3S1-get, "get"), agent(E3S1-get, A2S1-plant), isa(A2S1-plant, "green plants"), object(E3S1-get, A5S1-energy), isa(A5S1-energy, "the energy"), isa(E9S1-make, "make"), agent(E9S1-make, A2S1-plant), arg(E9S1-make, A10S1-food) -> effect(E3S1-get, E9S1-make), isa(A10S1-food, "food from water").
english(june2014questions.out.rule1, "green plants get the energy they[green plants] need to make food from soil").
pretty(june2014questions.out.rule1, "get('green plants', 'the energy'), make('green plants', 'food from soil') -> HAS_EFFECT(get, make), Q='soil'.").
june2014questions.out.rule1:: isa(E3S1-get, "get"), agent(E3S1-get, A2S1-plant), isa(A2S1-plant, "green plants"), object(E3S1-get, A5S1-energy), isa(A5S1-energy, "the energy"), isa(E9S1-make, "make"), agent(E9S1-make, A2S1-plant), arg(E9S1-make, A10S1-food) -> effect(E3S1-get, E9S1-make), isa(A10S1-food, "food from soil").
english(june2014questions.out.rule1, "when plants and animals die decomposers help return nutrients to the food chain").
pretty(june2014questions.out.rule1, "return(Q, 'nutrients', to('the food chain')) -> HAS_PURPOSE(Q, return), Q='decomposers'.").
june2014questions.out.rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain") -> purpose(A7S1-decomposer, E9S1-return), isa(A7S1-decomposer, "decomposers").
english(june2014questions.out.rule2, "when plants and animals die decomposers help return nutrients to the food chain").
pretty(june2014questions.out.rule2, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('decomposers', 'nutrients', to('the food chain')).").
june2014questions.out.rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants") -> purpose(A7S1-decomposer, E9S1-return), isa(A7S1-decomposer, "decomposers"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule3, "when plants and animals die decomposers help return nutrients to the food chain").
pretty(june2014questions.out.rule3, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('decomposers', 'nutrients', to('the food chain')).").
june2014questions.out.rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-decomposer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> purpose(A7S1-decomposer, E9S1-return), isa(A7S1-decomposer, "decomposers"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule1, "when plants and animals die predators help return nutrients to the food chain").
pretty(june2014questions.out.rule1, "return(Q, 'nutrients', to('the food chain')) -> HAS_PURPOSE(Q, return), Q='predators'.").
june2014questions.out.rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain") -> purpose(A7S1-predator, E9S1-return), isa(A7S1-predator, "predators").
english(june2014questions.out.rule2, "when plants and animals die predators help return nutrients to the food chain").
pretty(june2014questions.out.rule2, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('predators', 'nutrients', to('the food chain')).").
june2014questions.out.rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants") -> purpose(A7S1-predator, E9S1-return), isa(A7S1-predator, "predators"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule3, "when plants and animals die predators help return nutrients to the food chain").
pretty(june2014questions.out.rule3, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('predators', 'nutrients', to('the food chain')).").
june2014questions.out.rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-predator), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> purpose(A7S1-predator, E9S1-return), isa(A7S1-predator, "predators"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule1, "when plants and animals die prey help return nutrients to the food chain").
pretty(june2014questions.out.rule1, "die('plants') -> WHEN(Q, die), Q=prey('plants', 'help').").
june2014questions.out.rule1:: isa(A2S1-plant, "plants"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant) -> when(E7S1-prey, E5S1-die), isa(E7S1-prey, "prey"), agent(E7S1-prey, A2S1-plant), object(E7S1-prey, A8S1-help), isa(A8S1-help, "help").
english(june2014questions.out.rule2, "when plants and animals die prey help return nutrients to the food chain").
pretty(june2014questions.out.rule2, "die('plants') -> WHEN(Q, die), Q=prey('plants', 'help').").
june2014questions.out.rule2:: isa(A2S1-plant, "plants"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A4S1-animal, "animals"), agent(E5S1-die, A4S1-animal) -> when(E7S1-prey, E5S1-die), isa(E7S1-prey, "prey"), agent(E7S1-prey, A2S1-plant), object(E7S1-prey, A8S1-help), isa(A8S1-help, "help"), agent(E7S1-prey, A4S1-animal).
english(june2014questions.out.rule1, "when plants and animals die producers help return nutrients to the food chain").
pretty(june2014questions.out.rule1, "return(Q, 'nutrients', to('the food chain')) -> HAS_PURPOSE(Q, return), Q='producers'.").
june2014questions.out.rule1:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain") -> purpose(A7S1-producer, E9S1-return), isa(A7S1-producer, "producers").
english(june2014questions.out.rule2, "when plants and animals die producers help return nutrients to the food chain").
pretty(june2014questions.out.rule2, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('producers', 'nutrients', to('the food chain')).").
june2014questions.out.rule2:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants") -> purpose(A7S1-producer, E9S1-return), isa(A7S1-producer, "producers"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule3, "when plants and animals die producers help return nutrients to the food chain").
pretty(june2014questions.out.rule3, "return(Q, 'nutrients', to('the food chain')), die('plants') -> HAS_PURPOSE(Q, return), Q=return('producers', 'nutrients', to('the food chain')).").
june2014questions.out.rule3:: isa(E9S1-return, "return"), agent(E9S1-return, A7S1-producer), object(E9S1-return, A10S1-nutrient), isa(A10S1-nutrient, "nutrients"), to(E9S1-return, A14S1-chain), isa(A14S1-chain, "the food chain"), isa(E5S1-die, "die"), agent(E5S1-die, A2S1-plant), isa(A2S1-plant, "plants"), agent(E5S1-die, A4S1-animal), isa(A4S1-animal, "animals") -> purpose(A7S1-producer, E9S1-return), isa(A7S1-producer, "producers"), when(E9S1-return, E5S1-die).
english(june2014questions.out.rule1, "a bat flying at night is preparing for a seasonal change in the environment").
pretty(june2014questions.out.rule1, "prepare(Q, for('a seasonal change in the environment')) -> HAS_EFFECT(Q, prepare), Q=fly('a bat', at('night')).").
june2014questions.out.rule1:: isa(A2S1-bat, "a bat"), isa(E7S1-prepare, "prepare"), agent(E7S1-prepare, A2S1-bat), for(E7S1-prepare, A11S1-change), isa(A11S1-change, "a seasonal change in the environment") -> effect(E3S1-fly, E7S1-prepare), isa(E3S1-fly, "fly"), agent(E3S1-fly, A2S1-bat), at(E3S1-fly, A5S1-night), isa(A5S1-night, "night").
english(june2014questions.out.rule1, "an owl eating a mouse is preparing for a seasonal change in the environment").
pretty(june2014questions.out.rule1, "prepare(Q, for('a seasonal change in the environment')) -> HAS_EFFECT(Q, prepare), Q=eat('an owl', 'a mouse').").
june2014questions.out.rule1:: isa(A2S1-owl, "an owl"), isa(E7S1-prepare, "prepare"), agent(E7S1-prepare, A2S1-owl), for(E7S1-prepare, A11S1-change), isa(A11S1-change, "a seasonal change in the environment") -> effect(E3S1-eat, E7S1-prepare), isa(E3S1-eat, "eat"), agent(E3S1-eat, A2S1-owl), object(E3S1-eat, A5S1-mouse), isa(A5S1-mouse, "a mouse").
english(june2014questions.out.rule1, "a squirrel storing nuts is preparing for a seasonal change in the environment").
pretty(june2014questions.out.rule1, "prepare(Q, for('a seasonal change in the environment')) -> HAS_EFFECT(Q, prepare), Q=store('a squirrel', 'nuts').").
june2014questions.out.rule1:: isa(A2S1-squirrel, "a squirrel"), isa(E6S1-prepare, "prepare"), agent(E6S1-prepare, A2S1-squirrel), for(E6S1-prepare, A10S1-change), isa(A10S1-change, "a seasonal change in the environment") -> effect(E3S1-store, E6S1-prepare), isa(E3S1-store, "store"), agent(E3S1-store, A2S1-squirrel), object(E3S1-store, A4S1-nut), isa(A4S1-nut, "nuts").
english(june2014questions.out.rule1, "mechanical energy is being used when a person pushes a wooden block across the floor").
pretty(june2014questions.out.rule1, "use('a person', 'mechanical energy'), push('a person', 'a wooden block', across('the floor')) -> WHEN(use, push), Q='mechanical'.").
june2014questions.out.rule1:: isa(E5S1-use, "use"), agent(E5S1-use, A8S1-person), isa(A8S1-person, "a person"), object(E5S1-use, A2S1-energy), isa(E9S1-push, "push"), agent(E9S1-push, A8S1-person), object(E9S1-push, A12S1-block), isa(A12S1-block, "a wooden block"), across(E9S1-push, A15S1-floor), isa(A15S1-floor, "the floor") -> when(E5S1-use, E9S1-push), isa(A2S1-energy, "mechanical energy").
english(june2014questions.out.rule1, "magnetic energy is being used when a person pushes a wooden block across the floor").
pretty(june2014questions.out.rule1, "use('a person', 'magnetic energy'), push('a person', 'a wooden block', across('the floor')) -> WHEN(use, push), Q='magnetic'.").
june2014questions.out.rule1:: isa(E5S1-use, "use"), agent(E5S1-use, A8S1-person), isa(A8S1-person, "a person"), object(E5S1-use, A2S1-energy), isa(E9S1-push, "push"), agent(E9S1-push, A8S1-person), object(E9S1-push, A12S1-block), isa(A12S1-block, "a wooden block"), across(E9S1-push, A15S1-floor), isa(A15S1-floor, "the floor") -> when(E5S1-use, E9S1-push), isa(A2S1-energy, "magnetic energy").
english(june2014questions.out.rule1, "sound is being used when a person pushes a wooden block across the floor").
pretty(june2014questions.out.rule1, "use('a person', Q), push('a person', 'a wooden block', across('the floor')) -> WHEN(use, push), Q='sound'.").
june2014questions.out.rule1:: isa(E4S1-use, "use"), agent(E4S1-use, A7S1-person), isa(A7S1-person, "a person"), object(E4S1-use, A1S1-sound), isa(E8S1-push, "push"), agent(E8S1-push, A7S1-person), object(E8S1-push, A11S1-block), isa(A11S1-block, "a wooden block"), across(E8S1-push, A14S1-floor), isa(A14S1-floor, "the floor") -> when(E4S1-use, E8S1-push), isa(A1S1-sound, "sound").
english(june2014questions.out.rule1, "electrical energy is being used when a person pushes a wooden block across the floor").
pretty(june2014questions.out.rule1, "use('a person', 'electrical energy'), push('a person', 'a wooden block', across('the floor')) -> WHEN(use, push), Q='electrical'.").
june2014questions.out.rule1:: isa(E5S1-use, "use"), agent(E5S1-use, A8S1-person), isa(A8S1-person, "a person"), object(E5S1-use, A2S1-energy), isa(E9S1-push, "push"), agent(E9S1-push, A8S1-person), object(E9S1-push, A12S1-block), isa(A12S1-block, "a wooden block"), across(E9S1-push, A15S1-floor), isa(A15S1-floor, "the floor") -> when(E5S1-use, E9S1-push), isa(A2S1-energy, "electrical energy").
english(june2014questions.out.rule1, "since green plants make their[green plants] own food they[green plants] are called predators").
pretty(june2014questions.out.rule1, "make('green plants', 'their[green plants] own food') -> EXAMPLE_OF(make, Q), Q=make('green plants', 'their[green plants] own food').").
june2014questions.out.rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food") -> example(E4S1-make, A12S1-predator), isa(A12S1-predator, "predators").
english(june2014questions.out.rule1, "since green plants make their[green plants] own food they[green plants] are called decomposers").
pretty(june2014questions.out.rule1, "make('green plants', 'their[green plants] own food') -> EXAMPLE_OF(make, Q), Q=make('green plants', 'their[green plants] own food').").
june2014questions.out.rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food") -> example(E4S1-make, A12S1-decomposer), isa(A12S1-decomposer, "decomposers").
english(june2014questions.out.rule1, "since green plants make their[green plants] own food they[green plants] are called producers").
pretty(june2014questions.out.rule1, "make('green plants', 'their[green plants] own food') -> EXAMPLE_OF(make, Q), Q=make('green plants', 'their[green plants] own food').").
june2014questions.out.rule1:: isa(E4S1-make, "make"), agent(E4S1-make, A3S1-plant), isa(A3S1-plant, "green plants"), object(E4S1-make, A7S1-food), isa(A7S1-food, "their[green plants] own food") -> example(E4S1-make, A12S1-producer), isa(A12S1-producer, "producers").
english(june2014questions.out.rule1, "breathing most often has a harmful effect on the environment").
pretty(june2014questions.out.rule1, "harmful effect(X, on('the environment')) -> HAS_EFFECT(Q, harmful effect), Q=breathe(X).").
june2014questions.out.rule1:: isa(E7S1-effect, "a harmful effect"), on(E7S1-effect, A10S1-environment), isa(A10S1-environment, "the environment") -> effect(E1S1-breathe, E7S1-effect), isa(E1S1-breathe, "breathe").
english(june2014questions.out.rule1, "growing most often has a harmful effect on the environment").
pretty(june2014questions.out.rule1, " -> , Q=grow('a harmful effect on the environment').").
june2014questions.out.rule1::  -> isa(E1S1-grow, "grow"), agent(E1S1-grow, A7S1-effect), isa(A7S1-effect, "a harmful effect on the environment").
english(june2014questions.out.rule1, "planting most often has a harmful effect on the environment").
pretty(june2014questions.out.rule1, "harmful effect(X, on('the environment')) -> HAS_EFFECT(Q, harmful effect), Q=plant(X).").
june2014questions.out.rule1:: isa(E7S1-effect, "a harmful effect"), on(E7S1-effect, A10S1-environment), isa(A10S1-environment, "the environment") -> effect(E1S1-plant, E7S1-effect), isa(E1S1-plant, "plant").
english(june2014questions.out.rule1, "polluting most often has a harmful effect on the environment").
pretty(june2014questions.out.rule1, "harmful effect(X, on('the environment')) -> HAS_EFFECT(Q, harmful effect), Q=pollute(X).").
june2014questions.out.rule1:: isa(E7S1-effect, "a harmful effect"), on(E7S1-effect, A10S1-environment), isa(A10S1-environment, "the environment") -> effect(E1S1-pollute, E7S1-effect), isa(E1S1-pollute, "pollute").
english(june2014questions.out.rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to hot temperatures").
pretty(june2014questions.out.rule1, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', to(Q)) -> EXAMPLE_OF(these, adjust), Q='hot temperatures'.").
june2014questions.out.rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-temperature) -> example(A1S3-these, E8S3-adjust), isa(A11S3-temperature, "hot temperatures").
english(june2014questions.out.rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to hot temperatures").
pretty(june2014questions.out.rule2, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', 'two ways[these]', to(Q)) -> EXAMPLE_OF(these, adjust), Q='hot temperatures'.").
june2014questions.out.rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-temperature), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> example(A1S3-these, E8S3-adjust), isa(A11S3-temperature, "hot temperatures").
english(june2014questions.out.rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of food").
pretty(june2014questions.out.rule1, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', to(Q)) -> EXAMPLE_OF(these, adjust), Q='a shortage of food'.").
june2014questions.out.rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage) -> example(A1S3-these, E8S3-adjust), isa(A11S3-shortage, "a shortage of food").
english(june2014questions.out.rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of food").
pretty(june2014questions.out.rule2, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', 'two ways[these]', to(Q)) -> EXAMPLE_OF(these, adjust), Q='a shortage of food'.").
june2014questions.out.rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> example(A1S3-these, E8S3-adjust), isa(A11S3-shortage, "a shortage of food").
english(june2014questions.out.rule1, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of drinking water").
pretty(june2014questions.out.rule1, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', to(Q)) -> EXAMPLE_OF(these, adjust), Q='a shortage of drinking water'.").
june2014questions.out.rule1:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage) -> example(A1S3-these, E8S3-adjust), isa(A11S3-shortage, "a shortage of drinking water").
english(june2014questions.out.rule2, "A dog opens its mouth and lets its[its mouth] tongue hang out A human 's body produces sweat these are two ways[these] that organisms may adjust to a shortage of drinking water").
pretty(june2014questions.out.rule2, "open('A dog', 'its mouth'), produce('A human ’s body', 'sweat'), adjust('organisms', 'these', 'two ways[these]', to(Q)) -> EXAMPLE_OF(these, adjust), Q='a shortage of drinking water'.").
june2014questions.out.rule2:: isa(E3S1-open, "open"), agent(E3S1-open, A2S1-dog), isa(A2S1-dog, "A dog"), object(E3S1-open, A5S1-mouth), isa(A5S1-mouth, "its mouth"), isa(E5S2-produce, "produce"), agent(E5S2-produce, A4S2-body), isa(A4S2-body, "A human 's body"), object(E5S2-produce, A6S2-sweat), isa(A6S2-sweat, "sweat"), isa(A1S3-these, "these"), isa(E8S3-adjust, "adjust"), agent(E8S3-adjust, A6S3-organism), isa(A6S3-organism, "organisms"), object(E8S3-adjust, A1S3-these), to(E8S3-adjust, A11S3-shortage), object(E8S3-adjust, A4S3-way), isa(A4S3-way, "two ways[these]") -> example(A1S3-these, E8S3-adjust), isa(A11S3-shortage, "a shortage of drinking water").
english(june2014questions.out.rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a thermometer to get a better look at the spots[small white spots]").
pretty(june2014questions.out.rule1, "grow('A student', 'some plants', for('an experiment')), notify('She', 'small white spots', on('the leaves')), use('She', Q), get('She', 'a better look at the spots[small white spots]') -> HAS_EFFECT(use, get), Q='a thermometer'.").
june2014questions.out.rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A5S3-thermometer), isa(E7S3-get, "get"), agent(E7S3-get, A1S2-she), object(E7S3-get, A10S3-look), isa(A10S3-look, "a better look at the spots[small white spots]") -> effect(E3S3-use, E7S3-get), isa(A5S3-thermometer, "a thermometer").
english(june2014questions.out.rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a hand lens to get a better look at the spots[small white spots]").
pretty(june2014questions.out.rule1, "grow('A student', 'some plants', for('an experiment')), notify('She', 'small white spots', on('the leaves')), use('She', Q), get('She', 'a better look at the spots[small white spots]') -> HAS_EFFECT(use, get), Q='a hand lens'.").
june2014questions.out.rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A6S3-lens), isa(E8S3-get, "get"), agent(E8S3-get, A1S2-she), arg(E8S3-get, A11S3-look), isa(A11S3-look, "a better look at the spots[small white spots]") -> effect(E3S3-use, E8S3-get), isa(A6S3-lens, "a hand lens").
english(june2014questions.out.rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a graduated cylinder to get a better look at the spots[small white spots]").
pretty(june2014questions.out.rule1, "grow('A student', 'some plants', for('an experiment')), notify('She', 'small white spots', on('the leaves')), use('She', Q), get('She', 'a better look at the spots[small white spots]') -> HAS_EFFECT(use, get), Q='a graduated cylinder'.").
june2014questions.out.rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A6S3-cylinder), isa(E8S3-get, "get"), agent(E8S3-get, A1S2-she), object(E8S3-get, A11S3-look), isa(A11S3-look, "a better look at the spots[small white spots]") -> effect(E3S3-use, E8S3-get), isa(A6S3-cylinder, "a graduated cylinder").
english(june2014questions.out.rule1, "A student is growing some plants for an experiment She notices small white spots on the leaves she[She] should use a balance to get a better look at the spots[small white spots]").
pretty(june2014questions.out.rule1, "grow('A student', 'some plants', for('an experiment')), notify('She', 'small white spots', on('the leaves')), use('She', Q), get('She', 'a better look at the spots[small white spots]') -> HAS_EFFECT(use, get), Q='a balance'.").
june2014questions.out.rule1:: isa(E4S1-grow, "grow"), agent(E4S1-grow, A2S1-student), isa(A2S1-student, "A student"), object(E4S1-grow, A6S1-plant), isa(A6S1-plant, "some plants"), for(E4S1-grow, A9S1-experiment), isa(A9S1-experiment, "an experiment"), isa(E2S2-notice, "notify"), agent(E2S2-notice, A1S2-she), isa(A1S2-she, "She"), object(E2S2-notice, A5S2-spot), isa(A5S2-spot, "small white spots"), on(E2S2-notice, A8S2-leaf), isa(A8S2-leaf, "the leaves"), isa(E3S3-use, "use"), agent(E3S3-use, A1S2-she), object(E3S3-use, A5S3-balance), isa(E7S3-get, "get"), agent(E7S3-get, A1S2-she), arg(E7S3-get, A10S3-look), isa(A10S3-look, "a better look at the spots[small white spots]") -> effect(E3S3-use, E7S3-get), isa(A5S3-balance, "a balance").
english(june2014questions.out.rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to find food").
pretty(june2014questions.out.rule1, "grow('A fox', 'thicker fur', as('a season changes')), adapt('A fox') -> HAS_PURPOSE(adapt, Q), Q=adapt('A fox'), find('A fox', 'food').").
june2014questions.out.rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox) -> purpose(E2S2-adaptation, E7S2-find), isa(E7S2-find, "find"), agent(E7S2-find, A2S1-fox), object(E7S2-find, A8S2-food), isa(A8S2-food, "food").
english(june2014questions.out.rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to keep warmer").
pretty(june2014questions.out.rule1, "grow('A fox', 'thicker fur', as('a season changes')), adapt('A fox') -> HAS_PURPOSE(adapt, Q), Q=adapt('A fox'), keep('A fox', 'warmer').").
june2014questions.out.rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox) -> purpose(E2S2-adaptation, E7S2-keep), isa(E7S2-keep, "keep"), agent(E7S2-keep, A2S1-fox), arg(E7S2-keep, A8S2-warmer), isa(A8S2-warmer, "warmer").
english(june2014questions.out.rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to grow stronger").
pretty(june2014questions.out.rule1, "grow('A fox', 'thicker fur', as('a season changes')), adapt('A fox') -> HAS_PURPOSE(adapt, Q), Q=adapt('A fox'), grow('A fox', 'stronger').").
june2014questions.out.rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox) -> purpose(E2S2-adaptation, E7S2-grow), isa(E7S2-grow, "grow"), agent(E7S2-grow, A2S1-fox), arg(E7S2-grow, A8S2-stronger), isa(A8S2-stronger, "stronger").
english(june2014questions.out.rule1, "A fox grows thicker fur as a season changes this adaptation helps the fox[A fox] to escape from predators").
pretty(june2014questions.out.rule1, "grow('A fox', 'thicker fur', as('a season changes')), adapt('A fox') -> HAS_PURPOSE(adapt, Q), Q=adapt('A fox'), escape('A fox', 'from predators').").
june2014questions.out.rule1:: isa(E3S1-grow, "grow"), agent(E3S1-grow, A2S1-fox), isa(A2S1-fox, "A fox"), object(E3S1-grow, A5S1-fur), isa(A5S1-fur, "thicker fur"), as(E3S1-grow, A9S1-change), isa(A9S1-change, "a season changes"), isa(E2S2-adaptation, "adapt"), agent(E2S2-adaptation, A2S1-fox) -> purpose(E2S2-adaptation, E7S2-escape), isa(E7S2-escape, "escape"), agent(E7S2-escape, A2S1-fox), object(E7S2-escape, A8S2-from), isa(A8S2-from, "from predators").
english(june2014questions.out.rule1, "hibernation often helps an animal attract a mate").
pretty(june2014questions.out.rule1, "attract('an animal', 'a mate') -> HAS_PURPOSE(Q, attract), Q=hibernate('an animal').").
june2014questions.out.rule1:: agent(E1S1-hibernation, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate") -> purpose(E1S1-hibernation, E6S1-attract), isa(E1S1-hibernation, "hibernate").
english(june2014questions.out.rule1, "camouflage often helps an animal attract a mate").
pretty(june2014questions.out.rule1, "attract('an animal', 'a mate') -> HAS_PURPOSE(Q, attract), Q='camouflage'.").
june2014questions.out.rule1:: isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), isa(A5S1-animal, "an animal"), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate") -> purpose(A1S1-camouflage, E6S1-attract), isa(A1S1-camouflage, "camouflage").
english(june2014questions.out.rule1, "coloration often helps an animal attract a mate").
pretty(june2014questions.out.rule1, "attract('an animal', 'a mate') -> HAS_PURPOSE(Q, attract), Q=color('an animal').").
june2014questions.out.rule1:: agent(E1S1-coloration, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate") -> purpose(E1S1-coloration, E6S1-attract), isa(E1S1-coloration, "color").
english(june2014questions.out.rule1, "migration often helps an animal attract a mate").
pretty(june2014questions.out.rule1, "attract('an animal', 'a mate') -> HAS_PURPOSE(Q, attract), Q=migrate('an animal').").
june2014questions.out.rule1:: agent(E1S1-migration, A5S1-animal), isa(A5S1-animal, "an animal"), isa(E6S1-attract, "attract"), agent(E6S1-attract, A5S1-animal), object(E6S1-attract, A8S1-mate), isa(A8S1-mate, "a mate") -> purpose(E1S1-migration, E6S1-attract), isa(E1S1-migration, "migrate").
english(june2014questions.out.rule1, "animals get energy for growth and repair from soil").
pretty(june2014questions.out.rule1, "get('animals', 'energy', for('growth from soil'), for('repair')) -> , Q='soil'.").
june2014questions.out.rule1:: isa(E2S1-get, "get"), agent(E2S1-get, A1S1-animal), isa(A1S1-animal, "animals"), object(E2S1-get, A3S1-energy), isa(A3S1-energy, "energy"), for(E2S1-get, A5S1-growth), for(E2S1-get, A7S1-repair), isa(A7S1-repair, "repair") -> isa(A5S1-growth, "growth from soil").
english(june2014questions.out.rule1, "animals get energy for growth and repair from food").
pretty(june2014questions.out.rule1, "get('animals', 'energy', for('growth from food'), for('repair')) -> , Q='food'.").
june2014questions.out.rule1:: isa(E2S1-get, "get"), agent(E2S1-get, A1S1-animal), isa(A1S1-animal, "animals"), object(E2S1-get, A3S1-energy), isa(A3S1-energy, "energy"), for(E2S1-get, A5S1-growth), for(E2S1-get, A7S1-repair), isa(A7S1-repair, "repair") -> isa(A5S1-growth, "growth from food").
english(june2014questions.out.rule1, "animals get energy for growth and repair from water").
pretty(june2014questions.out.rule1, "get('animals', 'energy', for('growth from water'), for('repair')) -> , Q='water'.").
june2014questions.out.rule1:: isa(E2S1-get, "get"), agent(E2S1-get, A1S1-animal), isa(A1S1-animal, "animals"), object(E2S1-get, A3S1-energy), isa(A3S1-energy, "energy"), for(E2S1-get, A5S1-growth), for(E2S1-get, A7S1-repair), isa(A7S1-repair, "repair") -> isa(A5S1-growth, "growth from water").
english(june2014questions.out.rule1, "animals get energy for growth and repair from air").
pretty(june2014questions.out.rule1, "get('animals', 'energy', for('growth from air'), for('repair')) -> , Q='air'.").
june2014questions.out.rule1:: isa(E2S1-get, "get"), agent(E2S1-get, A1S1-animal), isa(A1S1-animal, "animals"), object(E2S1-get, A3S1-energy), isa(A3S1-energy, "energy"), for(E2S1-get, A5S1-growth), for(E2S1-get, A7S1-repair), isa(A7S1-repair, "repair") -> isa(A5S1-growth, "growth from air").
english(june2014questions.out.rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by magnetism").
pretty(june2014questions.out.rule1, "appear('A car skids along the road and smoke'), produce('the heat', 'the smoke') -> CAUSES(Q, produce), Q='magnetism'.").
june2014questions.out.rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke") -> cause(A10S2-magnetism, E4S2-produce), isa(A10S2-magnetism, "magnetism").
english(june2014questions.out.rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by sound").
pretty(june2014questions.out.rule1, "appear('A car skids along the road and smoke'), produce('the heat', 'the smoke') -> CAUSES(Q, produce), Q='sound'.").
june2014questions.out.rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke") -> cause(A10S2-sound, E4S2-produce), isa(A10S2-sound, "sound").
english(june2014questions.out.rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by light").
pretty(june2014questions.out.rule1, "appear('A car skids along the road and smoke'), produce('the heat', 'the smoke') -> CAUSES(Q, produce), Q='light'.").
june2014questions.out.rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke") -> cause(A10S2-light, E4S2-produce), isa(A10S2-light, "light").
english(june2014questions.out.rule1, "A car skids along the road and smoke appears to be coming from under the tires the heat that produces the smoke is caused by friction").
pretty(june2014questions.out.rule1, "appear('A car skids along the road and smoke'), produce('the heat', 'the smoke') -> CAUSES(Q, produce), Q='friction'.").
june2014questions.out.rule1:: isa(E9S1-appear, "appear"), agent(E9S1-appear, A3S1-skid), isa(A3S1-skid, "A car skids along the road and smoke"), isa(E4S2-produce, "produce"), agent(E4S2-produce, A2S2-heat), isa(A2S2-heat, "the heat"), object(E4S2-produce, A6S2-smoke), isa(A6S2-smoke, "the smoke") -> cause(A10S2-friction, E4S2-produce), isa(A10S2-friction, "friction").

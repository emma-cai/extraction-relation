// Example pipeline configuration.
ermine {
  pipeline {
    name: "Ferret"
    processors = [{
      name = "NlpstackParser"
      // Here, we have one input and one output. The input file will be specified with a -i flag on
      // the commandline, and the output will be provided as a "default" input to the next processor
      // in the pipeline.
    },{
      name = "ClearSrl"
      // Here, we expect one input - which we have from the previous processor. We leave the
      // 'inputs' array empty to use it automatically.

      // For outputs, we're going to provide a full configuration: A name plus a URI identifying
      // where to send the output to.  For sake of example, we're writing to a file in the temp
      // directory - but this could be any filesystem path.
      outputs: [ { name: "ttl", uri: "file://"${java.io.tmpdir}"/ferret_example_clear.ttl" } ]
    },{
      name = "FIXME - FERRET"
      // This expects one input - the TTL file we created from the previous step. We're using the
      // shorthand "bareword" configuration. This means "look for an output with the given name
      // earlier in the pipeline, and use that as input."
      // We could also do a full specification like above - with a name plus a URI.
      inputs: [ "ttl" ]
      // Here we'll use a shorthand URI configuration. A URI string will be treated the same as a
      // config object with the `uri` field specified.
      outputs: [ "file://"${java.io.tmpdir}"/ferret_example_extractions.ttl" ]
    }]
  }
}
